#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_LSM303_U.h>
#include <Adafruit_L3GD20_U.h>
#include <Adafruit_9DOF.h>

#ifndef __CC3200R1M1RGC__
// Do not include SPI for CC3200 LaunchPad
#include <SPI.h>
#endif
#include <WiFi.h>

// your network name also called SSID
char ssid[] = "elyuel";
// your network password
char password[] = "kappa123";
// your network key Index number (needed only for WEP)
int keyIndex = 0;

WiFiServer server(80);

/* Declare reference variables for heading, pictch, and roll */
bool ref_roll_init = false;
bool ref_pitch_init = false;
bool ref_heading_init = false;
double ref_roll = 0.0;
double ref_pitch = 0.0;
double ref_heading = 0.0;


/* Assign a unique ID to the sensors */
Adafruit_9DOF                dof   = Adafruit_9DOF();
Adafruit_LSM303_Accel_Unified accel = Adafruit_LSM303_Accel_Unified(30101);
Adafruit_LSM303_Mag_Unified   mag   = Adafruit_LSM303_Mag_Unified(30302);

/* Update this with the correct SLP for accurate altitude measurements */
float seaLevelPressure = SENSORS_PRESSURE_SEALEVELHPA;

/**************************************************************************/
/*!
    @brief  Initialises all the sensors used by this example
*/
/**************************************************************************/
void initSensors()
{
  if (!accel.begin())
  {
    /* There was a problem detecting the LSM303 ... check your connections */
    Serial.println(F("Ooops, no LSM303 detected ... Check your wiring!"));
    while (1);
  }
  if (!mag.begin())
  {
    /* There was a problem detecting the LSM303 ... check your connections */
    Serial.println("Ooops, no LSM303 detected ... Check your wiring!");
    while (1);
  }
}

/**************************************************************************/
/*!

*/
/**************************************************************************/
void setup(void)
{
  Serial.begin(115200);
  pinMode(A12, OUTPUT);
  pinMode(A10, OUTPUT);

  Serial.println(F("Adafruit 9 DOF Pitch/Roll/Heading Example")); Serial.println("");


  Serial.begin(115200);      // initialize serial communication
  pinMode(RED_LED, OUTPUT);      // set the LED pin mode

  // attempt to connect to Wifi network:
  Serial.print("Attempting to connect to Network named: ");
  // print the network name (SSID);
  Serial.println(ssid);
  // Connect to WPA/WPA2 network. Change this line if using open or WEP network:
  WiFi.begin(ssid, password);
  while ( WiFi.status() != WL_CONNECTED) {
    // print dots while we wait to connect
    Serial.print(".");
    delay(300);
  }

  Serial.println("\nYou're connected to the network");
  Serial.println("Waiting for an ip address");

  while (WiFi.localIP() == INADDR_NONE) {
    // print dots while we wait for an ip addresss
    Serial.print(".");
    delay(300);
  }

  Serial.println("\nIP Address obtained");

  // you're connected now, so print out the status
  printWifiStatus();

  Serial.println("Starting webserver on port 80");
  server.begin();                           // start the web server on port 80
  Serial.println("Webserver started!");


}

/**************************************************************************/
/*!
    @brief  Constantly check the roll/pitch/heading/altitude/temperature
*/
/**************************************************************************/



int toggle = 0;

void loop() {

  String output2 = "<img src='http://i.imgur.com/Lfpfs7x.png'>";
  String output = "";
  digitalWrite(A12, HIGH);
  digitalWrite(A10, LOW);
  initSensors();

  sensors_event_t accel_event;
  sensors_event_t mag_event;
  sensors_vec_t   orientation;

   /* Calculate pitch and roll from the raw accelerometer data */
  //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  accel.getEvent(&accel_event);
  if (dof.accelGetOrientation(&accel_event, &orientation))
  {
    /* Get absolute reference values */
    if (!ref_roll_init )
    {
      ref_roll = orientation.roll;
      ref_roll_init = true;
    }
    if (!ref_pitch_init )
    {
      ref_pitch = orientation.pitch;
      ref_pitch_init = true;
    }
    /* 'orientation' should have valid .roll and .pitch fields */
    Serial.print(F("\nRoll: "));
    Serial.print(orientation.roll);
    Serial.print(F("; "));
    Serial.print(F("Pitch: "));
    Serial.print(orientation.pitch);
    Serial.print(F("; "));
    Serial.print(F("REF PITCH: "));
    Serial.print(ref_pitch);
    Serial.print(F("; "));
    output = output + "\nRoll: " + orientation.roll + "; " + "Pitch: " + orientation.pitch + "; ";

    /* Toggle LED */
    if (abs(orientation.pitch - ref_pitch) > 2)
    {
      digitalWrite(RED_LED, HIGH);
      /**********LOAD IMAGE**************/
      if (orientation.pitch > ref_pitch)
      {
        output2 = "<img src='http://i.imgur.com/3HKCXFa.png'>";
        //Correct by turning clockwise.
        //INSERT IMAGE HERE!
      }
      else
      {
        output2 = "<img src='http://i.imgur.com/ejkPO4I.png'>";
        //Correct by turning counter-clockwise.
        //INSERT IMAGE HERE
      }
    }
    else if (abs(orientation.pitch - ref_pitch) < 2)
    {
      digitalWrite(RED_LED, LOW);
    }
  }

  /* Calculate the heading using the magnetometer */
  //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  mag.getEvent(&mag_event);

  if (dof.magGetOrientation(SENSOR_AXIS_Z, &mag_event, &orientation))
  {
    /* Get absolute reference value */
    if (!ref_heading_init )
    {
      ref_heading = orientation.heading;
      ref_heading_init = true;
    }
    /* 'orientation' should have valid .heading data now */
    Serial.print(F("Heading: "));
    Serial.print(orientation.heading);
    Serial.print(F("; "));
    Serial.print(F("REF HEADING: "));
    Serial.print(ref_heading);
    Serial.print(F("; "));
    output = output + "Heading: " + orientation.heading + "; ";

    /* Toggle LED */
    if (abs(orientation.heading - ref_heading) > 5)
    {
      digitalWrite(RED_LED, HIGH);

      /**********LOAD IMAGE**************/
      if (orientation.heading < ref_heading)
      {
        output2 = "<img src='http://i.imgur.com/np1QEYg.png'>";
        //INSERT IMAGE HERE!
      }
      else
      {
        output2 = "<img src='http://i.imgur.com/q9AEuNv.png'>";
        //INSERT IMAGE HERE
      }
    }
    else if (abs(orientation.heading - ref_heading) < 5)
    {
      digitalWrite(RED_LED, LOW);
    }
    Serial.println(F(""));
  }


  int i = 0;
  WiFiClient client = server.available();   // listen for incoming clients

  if (client) {                             // if you get a client,
    Serial.println("new client");           // print a message out the serial port
    char buffer[150] = {0};                 // make a buffer to hold incoming data
    while (client.connected()) {            // loop while the client's connected
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        Serial.write(c);                    // print it out the serial monitor
        if (c == '\n') {                    // if the byte is a newline character

          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (strlen(buffer) == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println();

            // the content of the HTTP response follows the header:
            client.println("<html> <style> body { font-family: Georgia, Serif; font-size: 14px;background: #43C6AC; background: -webkit-linear-gradient(to left, #43C6AC , #191654); background: linear-gradient(to left, #43C6AC , #191654); } h1, .h1 { margin-top: 20px;font-family: inherit; font-weight: 500; line-height: 1.1; color: white; font-size: 36px; } </style> <head><meta http-equiv=\"refresh\" content=\"0.5\"></head><body> <center><h1>Welcome to your exercise session.</h1>");
            client.println(output2);
            client.println("</center> </body> </html>");

            // The HTTP response ends with another blank line:
            client.println();
            // break out of the while loop:
            break;
          }
          else {      // if you got a newline, then clear the buffer:
            memset(buffer, 0, 150);
            i = 0;
          }
        }
        else if (c != '\r') {    // if you got anything else but a carriage return character,
          buffer[i++] = c;      // add it to the end of the currentLine
        }

   
      }
    }
    // close the connection:
    client.stop();
    Serial.println("client disonnected");
  }
}

//
//a way to check if one array ends with another array
//
boolean endsWith(char* inString, const char* compString) {
  int compLength = strlen(compString);
  int strLength = strlen(inString);

  //compare the last "compLength" values of the inString
  int i;
  for (i = 0; i < compLength; i++) {
    char a = inString[(strLength - 1) - i];
    char b = compString[(compLength - 1) - i];
    if (a != b) {
      return false;
    }
  }
  return true;
}

void printWifiStatus() {
  // print the SSID of the network you're attached to:
  Serial.print("SSID: ");
  Serial.println(WiFi.SSID());

  // print your WiFi IP address:
  IPAddress ip = WiFi.localIP();
  Serial.print("IP Address: ");
  Serial.println(ip);

  // print the received signal strength:
  long rssi = WiFi.RSSI();
  Serial.print("signal strength (RSSI):");
  Serial.print(rssi);
  Serial.println(" dBm");
  // print where to go in a browser:
  Serial.print("To see this page in action, open a browser to http://");
  Serial.println(ip);
}